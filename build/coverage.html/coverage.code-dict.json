{"/home/travis/build/npmtest/node-npmtest-restful/test.js":"/* istanbul instrument in package npmtest_restful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restful/lib.npmtest_restful.js":"/* istanbul instrument in package npmtest_restful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_restful = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_restful = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-restful/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-restful && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_restful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_restful\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_restful.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_restful.rollup.js'] =\n            local.assetsDict['/assets.npmtest_restful.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_restful.__dirname + '/lib.npmtest_restful.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restful/node_modules/restful/lib/restful.js":"/*\n * restful.js: Restful routing using resourceful and director.\n *\n * (C) 2012, Nodejitsu Inc.\n *\n */\n\nvar director = require('director'),\n    resourceful = require('resourceful'),\n    de       = require('director-explorer'),\n    controller = require('./restful/controller'),\n    url      = require('url'),\n    qs       = require('qs'),\n    util     = require('util'),\n    utile    = require('utile'),\n    http     = require('http');\n\nexports.buildResourceId = function(resources, ids) {\n  if (ids.length == 1)\n    return ids[0];\n\n  resources = resources.slice(0);\n  ids = Array.prototype.slice.apply(ids); // ids might be an arguments object.\n\n  //\n  // Director is for some reason adding a function to the end of the handler arguments.\n  // this is a temporary workaround.\n  //\n  if (typeof ids[ids.length - 1] == 'function')\n    ids.pop();\n\n  if (resources.length == (ids.length))\n    resources.pop();\n\n  return resources.reverse().concat(ids).join('/');\n};\n\n//\n// ### function createRouter (resource, options)\n// #### @resource {resourceful.Resource} Resource to use for the router.\n// #### @options {Object} Options to use when attaching routes\n//\n// Creates a new \"ResourcefulRouter\" instance that will dispatch RESTFul urls\n// for specified resource\n//\nexports.createRouter = function (resource, options) {\n  return new ResourcefulRouter(resource, options);\n};\n\n//\n// ### function createServer (resources)\n// #### @resources {resourceful.Resource} Resource(s) to use for the router.\n//\n// Responds with an `http.Server` instance with a `RestfulRouter` for the\n// specified `resources`.\n//\nexports.createServer = function (resources, options, handler) {\n  var router = exports.createRouter(resources, options),\n  server = http.createServer(function (req, res) {\n    req.chunks = [];\n    req.on('data', function (chunk) {\n      req.chunks.push(chunk.toString());\n    });\n\n    router.dispatch(req, res, function (err) {\n      if (err) {\n        //\n        // TODO: Dont always respond with 404\n        //\n        res.writeHead(404);\n        res.end();\n      }\n      console.log('Served ' + req.url);\n    });\n  });\n\n  server.router = router;\n  return server;\n\n};\n\n//\n// ### function ResourcefulRouter (resource, options)\n// #### @resource {resourceful.Resource} Resource to use for the router.\n// #### @options {Object} Options to use when attaching routes\n//\n// \"ResourcefulRouter\" Constructor function that will dispatch RESTFul urls\n// for specified resource\n//\n// POST    /creature    => Creature.create()\n// GET     /creature    => Creature.all()\n// GET     /creature/1  => Creature.show()\n// PUT     /creature/1  => Creature.update()\n// DELETE  /creature/1  => Creature.destroy()\n//\nvar ResourcefulRouter = exports.ResourcefulRouter = function (resource, options) {\n  options = options || {};\n\n  //\n  // ResourcefulRouter inherits from director.http.Router\n  //\n  director.http.Router.call(this, options);\n\n  this.resource = resource;\n  this.strict = options.strict || false;\n\n  exports.extendRouter(this, resource, options);\n};\n\n//\n// Inherit from `director.http.Router`.\n//\nutil.inherits(ResourcefulRouter, director.http.Router);\n\n//\n// Name this `broadway` plugin.\n//\nexports.name = 'restful';\n\n//\n// ### function init ()\n// Initializes the `restful` plugin with the App.\n//\nexports.init = function (done) {\n  done();\n};\n\nexports.attach = function (options) {\n  var app = this;\n  if (app.resources) {\n    Object.keys(app.resources).forEach(function (resource) {\n      resourceful.register(resource, app.resources[resource]);\n    });\n    Object.keys(app.resources).forEach(function (resource) {\n      var _options = options || app.resources[resource].restful || {};\n      //\n      // Only exposes resources as restful if they have set:\n      //\n      //     Resource.restful = true;\n      //     Resource.restful = { param: ':custom' };\n      //\n      if (app.resources[resource].restful) {\n        exports.extendRouter(\n          app.router,\n          app.resources[resource],\n          _options,\n          _options.respond\n        );\n      }\n    });\n  }\n}\n\n//\n// ### @public function extendRouter (router, resource, options, respond)\n// #### @router {director.http.Router} Router to extend with routes\n// #### @resources {resourceful.Resource} Resource(s) to use in routes.\n// #### @options {Object} or {Boolean} Options for routes added.\n// #### @respond {function} Function to write to the outgoing response\n//\n// Extends the `router` with routes for the `resources` supplied and the\n// specified `options` and `respond` function to write to outgoing\n// `http.ServerResponse` streams.\n//\nexports.extendRouter = function (router, resources, options, respond) {\n  options = options || {};\n  //\n  // Remark: If resource.restful has been set to \"true\",\n  // use default options\n  //\n  if(typeof options === \"boolean\" && options) {\n    options = {};\n  }\n\n  options.prefix  = options.prefix || '';\n  options.strict  = options.strict || false;\n  options.exposeMethods = options.exposeMethods || true;\n\n  if(typeof options.explore === \"undefined\") {\n    options.explore = true;\n  }\n\n  respond = respond || respondWithResult;\n\n  if (!Array.isArray(resources)){\n    resources = [resources];\n  }\n\n  router.path(options.prefix, function() {\n    var self = this;\n\n    if (options.explore) {\n      //\n      // Bind GET / to a generic explorer view of routing map ( using `director-explorer` )\n      //\n      this.get('/', function () {\n        var rsp = '';\n        //\n        // Remark: Output the basic routing map for every resource using https://github.com/flatiron/director-reflector\n        //\n        rsp += de.table(self);\n        this.res.end(rsp);\n      });\n    } else {\n      this.get('/', function (_id) {\n        var res = this.res,\n            req = this.req;\n        if (!options.strict) {\n          preprocessRequest(req, resources, 'index');\n        }\n        respond(req, res, 200, '', resources);\n      });\n    }\n    _extend(this, resources, options, respond);\n  })\n};\n\nfunction _extend (router, resources, options, respond, routeInfo) {\n\n  if (!Array.isArray(resources)){\n    resources = [resources];\n  }\n\n  if (!routeInfo)\n    routeInfo = [];\n\n  resources.forEach(function (resource) {\n    var entity = resource.lowerResource,\n        param = options.param || ':id';\n\n    //\n    // If we are not in strict mode, then extend the router with,\n    // some potentially helpful non-restful routes\n    //\n    if (!options.strict) {\n      _extendWithNonStrictRoutes(router, resource, options, respond);\n    }\n\n    //\n    // Scope all routes under /:resource\n    //\n    router.path(entity, function () {\n      //\n      // Bind resource.all ( show all ) to GET /:resource\n      //\n      this.get(function () {\n        var res = this.res,\n            req = this.req;\n\n        var showHandler = function (err, results) {\n          if (!options.strict) {\n            preprocessRequest(req, resource, 'list', results);\n          }\n          return err\n            ? respond(req, res, 500, err)\n            : respond(req, res, 200, entity, results);\n        };\n\n        if (options.parent) {\n          //\n          // Is there an easier way to tell if a parent exists?\n          //\n          var parentID = exports.buildResourceId(routeInfo, arguments);\n          options.parent.get(parentID, function(err, parent) {\n            if (err && err.status)\n              return respond(req, res, err.status, err);\n\n            if (err)\n              return respond(req, res, 500, err);\n\n            resource['by' + options.parent.resource](parent.id, showHandler);\n          });\n        } else {\n          resource.all(showHandler);\n          getter = resource.all.bind(resource);\n        }\n      });\n\n      //\n      // Bind POST /:resource to resource.create()\n      //\n      this.post(function () {\n        var res    = this.res,\n            req    = this.req;\n\n        if (!options.strict) {\n          preprocessRequest(req, resource);\n        }\n        var cloned = utile.clone(options);\n\n        cloned.parentID = exports.buildResourceId(routeInfo, arguments);\n        controller.create(req, res, resource, cloned, respond);\n      });\n\n      //\n      // Bind /:resource/:param path\n      //\n      this.path('/' + param, function () {\n        var paramScopedRouter = this;\n\n        //\n        // Check to see if resource has any children\n        //\n        if (resource._children && resource._children.length > 0) {\n\n          var childRouteInfo = routeInfo.concat(resource.lowerResource);\n\n          //\n          // For every child the resource has,\n          // recursively call the extendRouter method,\n          // prefixing the current resource as the base path\n          //\n          resource._children.forEach(function(child){\n            var childResource = resourceful.resources[child],\n                clonedOptions = utile.clone(options);\n            //\n            // Remark: Create a new instance of options since we don't want,\n            // to modify the reference scope inside this extendRouter call\n            //\n            clonedOptions.parent = resource;\n\n            _extend(paramScopedRouter, childResource, clonedOptions, respond, childRouteInfo);\n          });\n        }\n\n        //\n        // If we are going to expose Resource methods to the router interface\n        //\n        if (options.exposeMethods) {\n          //\n          // Find every function on the resource,\n          // which has the \"remote\" property set to \"true\"\n          //\n          for (var m in resource) {\n            if(typeof resource[m] === \"function\" && resource[m].remote === true) {\n              var self = this;\n\n              //\n              // For every function we intent to expose remotely,\n              // bind a GET and POST route to the method\n              //\n              (function(m){\n                self.path('/' + m.toLowerCase(), function(){\n\n                  var handler = function () {\n                    var req = this.req,\n                        res = this.res,\n                        _id = exports.buildResourceId(routeInfo, arguments);\n\n                    preprocessRequest(req, resource, 'remote');\n                    resource[m](_id, req.body, function(err, result){\n                      req.restful.message = result;\n                      req.restful.data.id = _id;\n                       return err\n                         ? respond(req, res, 500, err)\n                         : respond(req, res, 200, 'result', result);\n                     });\n                  }\n\n                  this.get(handler);\n                  this.post(handler);\n                });\n              })(m)\n            }\n          }\n        }\n\n        //\n        // Bind POST /:resource/:id to resource.create(_id)\n        //\n        this.post(function () {\n          var res    = this.res,\n              req    = this.req,\n              args   = Array.prototype.slice.call(arguments);\n              cloned = utile.clone(options);\n\n          // The id provided by the url overwrites any provided in the body.\n          req.body.id = args.pop();\n\n          // Work around that ugly bug\n          if (typeof req.body.id == 'function')\n            req.body.id = args.pop();\n\n          if (!cloned.strict)\n            preprocessRequest(req, resource);\n\n          if (cloned.parent)\n            cloned.parentID = exports.buildResourceId(routeInfo, args);\n\n          controller.create(req, res, resource, cloned, respond);\n        });\n\n        //\n        // Bind GET /:resource/:id to resource.get\n        //\n        this.get(function () {\n          var res    = this.res,\n              req    = this.req,\n              cloned = utile.clone(options);\n\n            if (!options.strict)\n              preprocessRequest(req, resource, 'show');\n\n            cloned._id = exports.buildResourceId(routeInfo, arguments);\n            controller.get(req, res, resource, cloned, respond);\n        });\n\n        //\n        // Bind DELETE /:resource/:id to resource.destroy\n        //\n        this.delete(function () {\n          var req = this.req,\n              res = this.res;\n\n          var _id = exports.buildResourceId(routeInfo, arguments);\n          resource.destroy(_id, function (err, result) {\n            return err\n              ? respond(req, res, 500, err)\n              : respond(req, res, 204);\n          });\n        });\n\n        //\n        // Bind PUT /:resource/:id to resource.update\n        //\n        this.put(function () {\n          var req = this.req,\n              res = this.res;\n\n          if (!options.strict)\n            preprocessRequest(req, resource);\n\n          var _id = exports.buildResourceId(routeInfo, arguments);\n          resource.update(_id, req.body, function (err, result) {\n            var status = 204;\n            if (err) {\n              status = 500;\n              if (typeof err === \"object\") { // && key.valid === false\n                status = 422;\n              }\n            }\n            return err\n              ? respond(req, res, status, err)\n              : respond(req, res, status);\n          });\n        });\n      });\n    });\n  });\n}\n\n//\n// ### @private function _extendWithNonStrictRoutes (router, resource, options, respond)\n// #### @router {director.http.Router} Router to extend with non-strict routes\n// #### @resource {resourceful.Resource} Resource to use in routes.\n// #### @options {Object} Options for routes added.\n// #### @respond function\n//\n// Since not all HTTP clients support PUT and DELETE verbs ( such as forms in web browsers ),\n// restful will also map the following browser friendly routes:\n//\n// If you prefer to not use this option, set { strict: true }\n//\n// POST  /creature/1/update  => Creature.update()\n// POST  /creature/1/destroy => Creature.destroy()\n//\n// You might also want to consider using a rails-like approach which uses\n// the convention of a reserved <form> input field called \"_method\" which contains either\n// \"PUT\" or \"DELETE\"\n//\n// see: https://github.com/senchalabs/connect/blob/master/lib/middleware/methodOverride.js\n//\nfunction _extendWithNonStrictRoutes(router, resource, options, respond) {\n  var entity = resource.lowerResource,\n      param = options.param || ':id';\n  //\n  // Bind POST /new to resource.create\n  //\n  router.post('/' + entity + '/new', function (_id) {\n    var res = this.res,\n        req = this.req;\n\n    if(typeof _id !== 'undefined') {\n      _id = _id.toString();\n    }\n\n    var action = \"show\";\n    preprocessRequest(req, resource, action);\n    resource.create(req.restful.data, function (err, result) {\n      var status = 201;\n      if (err) {\n        status = 500;\n        action = \"create\";\n        if (typeof err === \"object\") { // && key.valid === false\n          status = 422;\n        }\n      }\n      preprocessRequest(req, resource, action, result, err);\n      return err\n        ? respond(req, res, status, err)\n        : respond(req, res, status, entity, result);\n    });\n  });\n\n\n  router.get('/' + entity + '/find', function () {\n    var res = this.res,\n        req = this.req;\n    preprocessRequest(req, resource, 'find');\n    resource.find(req.restful.data, function(err, result){\n      respond(req, res, 200, entity, result);\n    });\n  });\n\n  router.post('/' + entity + '/find', function () {\n    var res = this.res,\n        req = this.req;\n    preprocessRequest(req, resource, 'find');\n    resource.find(req.restful.data, function(err, result){\n      respond(req, res, 200, entity, result);\n    });\n  });\n\n  router.get('/' + entity + '/new', function (_id) {\n    var res = this.res,\n        req = this.req;\n    preprocessRequest(req, resource, 'create');\n    respond(req, res, 200, '', {});\n  });\n\n  //\n  // Bind /:resource/:param path\n  //\n  router.path('/' + entity + '/' + param, function () {\n\n    this.get('/update', function (_id) {\n      var res = this.res,\n          req = this.req;\n      preprocessRequest(req, resource, 'update');\n      resource.get(_id, function(err, result){\n        preprocessRequest(req, resource, 'update', result, err);\n        return err\n          ? respond(req, res, 500, err)\n          : respond(req, res, 200, entity, result);\n      })\n    });\n\n    this.get('/destroy', function (_id) {\n      var res = this.res,\n          req = this.req;\n      preprocessRequest(req, resource, 'destroy');\n      resource.get(_id, function(err, result){\n        preprocessRequest(req, resource, 'destroy', result, err);\n        if(err) {\n          req.restful.data = _id;\n        }\n        return err\n          ? respond(req, res, 500, err)\n          : respond(req, res, 200, entity, result);\n      })\n    });\n\n    //\n    // Bind POST /:resource/:id/destroy to resource.destroy\n    // Remark: Not all browsers support DELETE verb, so we have to fake it\n    //\n    this.post('/destroy', function (_id) {\n      var req = this.req,\n          res = this.res;\n      if (!options.strict) {\n        preprocessRequest(req, resource, 'destroy');\n      }\n      resource.destroy(_id, function (err, result) {\n        req.restful.data = _id;\n        return err\n          ? respond(req, res, 500, err)\n          : respond(req, res, 204);\n      });\n    });\n\n    //\n    // Bind POST /:resource/:id/update to resource.update\n    // Remark: Not all browsers support PUT verb, so we have to fake it\n    //\n    this.post('/update', function (_id) {\n      var req = this.req,\n          res = this.res;\n\n      if (!options.strict) {\n        preprocessRequest(req, resource, 'update');\n      }\n\n      resource.update(_id, this.req.body, function (err, result) {\n        var status = 204;\n\n        if (err) {\n          status = 500;\n          if (typeof err === \"object\") { // && key.valid === false\n            status = 422;\n          }\n        }\n\n        return err\n          ? respond(req, res, status, err)\n          : respond(req, res, status, entity, result);\n      });\n    });\n\n\n  });\n}\n\n//\n// ### @private function respondWithResult (req, res, status, options, value)\n// #### @req {http.ServerRequest} Incoming Server request\n// #### @res {http.ServerResponse} Server respond to write to\n// #### @status {number} Status code to respond with\n// #### @key {Object|string} Object to respond with or key to set for `value`\n// #### @value {Object} **Optional** Value to set in the result for the specified `key`\n//\n// Helper function for responding from `restful` routes:\n//\n//    respond(req, res, 200);\n//    respond(req, res, 500, err);\n//    respond(req, res, 200, 'users', [{...}, {...}, ...]);\n//\nfunction respondWithResult(req, res, status, key, value) {\n  var result;\n  res.writeHead(status, { 'Content-Type': 'application/json' });\n\n  if (arguments.length === 5) {\n    result = {};\n    result[key] = value;\n  }\n  else {\n    result = key;\n  }\n\n  res.end(result ? JSON.stringify(result) : '');\n}\n\n//\n// ### function (req, resource)\n// #### @req {http.ServerRequest} Server request to preprocess\n// #### @resource {resourceful.Resource} Resource to preprocess against req\n//\n// Preprocesses \"numbery\" strings in the `req` body.\n//\nfunction preprocessRequest(req, resource, action, data, error) {\n\n  data = data || {};\n  error = error || null;\n  req.body = req.body || {};\n\n  //\n  // Remark: `restful` generates a REST interface for a Resource.\n  // Since Resources inheritently has more functionality then HTTP can provide out of the box,\n  // we are required to perform some type cohersions for non-strict mode.\n  //\n  // For instance: If we know a property type to be Number and we are using a,\n  // HTML4 input to submit it's value...it will always come in as a \"numbery\" String.\n  //\n  // This will cause the Number validation in Resourceful to fail since 50 !== \"50\"\n\n  for (var p in req.body) {\n\n    //\n    // Number: Attempt to coerce any incoming properties know to be Numbers to a Number\n    //\n    if (resource.schema.properties[p] && resource.schema.properties[p].type === \"number\") {\n      req.body[p] = Number(req.body[p]);\n      if (req.body[p].toString() === \"NaN\") {\n        req.body[p] = \"\";\n      }\n    }\n\n    //\n    // Array: Attempt to coerce any incoming properties know to be Arrays to an Array\n    //\n    if (resource.schema.properties[p] && resource.schema.properties[p].type === \"array\") {\n      //\n      // TODO: Better array creation than eval\n      //\n      try {\n        req.body[p] = eval(req.body[p]);\n      } catch (err) {\n      }\n      if (!Array.isArray(req.body[p])) {\n        req.body[p] = [];\n      }\n    }\n\n    //\n    // Boolean: Attempt to coerce any incoming properties know to be boolean to an boolean\n    //\n    if (resource.schema.properties[p] && resource.schema.properties[p].type === \"boolean\") {\n      if(typeof req.body[p] !== 'undefined') {\n        data[p] = true;\n      } else {\n        data[p] = false;\n      }\n    }\n  }\n\n  var query = url.parse(req.url),\n      params = qs.parse(query.query);\n\n  //\n  // Merge query and form data\n  //\n  for(var p in req.body) {\n    if(typeof data[p] === 'undefined') {\n      data[p] = req.body[p];\n    }\n  }\n\n  for(var p in params) {\n    if(typeof data[p] === 'undefined') {\n      data[p] = params[p];\n    }\n  }\n\n  //\n  // Remark: Append a new object to the req for additional processing down the middleware chain\n  //\n  req.restful = {\n    action: action,\n    resource: resource,\n    data: data,\n    error: error\n  };\n\n  //\n  // TODO: If there is no in-coming ID, check to see if we have any attempted secondary keys\n  //\n      /*\n      if (_id.length === 0) {\n          ('check for alts');\n        if(req.body.name) {\n          _id = req.body.name;\n        }\n      }*/\n\n  //\n  // Remark: Not returning any values since \"req\" is referenced in parent scope.\n  //\n}\n\n//\n// ### function inflect (str)\n// #### @str {string} String to inflect\n//\n// Responds with a properly pluralized string for `str`.\n//\nfunction inflect (str) {\n  return utile.inflect.pluralize(str);\n}\n\nfunction prettyPrint (resources) {\n  var str = '';\n  resources.forEach(function(resource){\n    str += '\\n\\n';\n    str += '## ' + resource._resource + ' - schema \\n\\n';\n    str += JSON.stringify(resource.schema.properties, true, 2) + '\\n\\n';\n  });\n  return str;\n}\n","/home/travis/build/npmtest/node-npmtest-restful/node_modules/restful/lib/restful/controller.js":"//\n// This \"controller\" module exists only to help keep some of the route handling code DRY\n//                      It doesn't do anything fancy.\n//\n\nvar controller = exports,\n    utile = require('utile');\n\n//\n// \"create\" handler for all incoming routes which are intended to create resources\n// There is only one way to make \n//     .parent - the parent resource constructor.\n//     .parentID - ID of the parent resource\n//\ncontroller.create = function (req, res, resource, optionsRef, respond) {\n\n  var options = utile.clone(optionsRef);\n\n  //\n  // Remark: We need to reserve the id \"new\" in order to make resource-routing work properly.\n  // I don't agree with this, but I'm not aware of a better solution solution.\n  //\n  // Based on research, both Rails and Express follow this same convention,\n  // so we might as well try to conform to that unless there is a better solution.\n  //\n\n  var createHandler = function (err, result) {\n      var status = 201;\n      if (err) {\n        status = 500;\n        if (typeof err === \"object\") { // && key.valid === false\n          status = 422;\n        }\n      }\n      req.restful = {\n        error: err,\n        action: 'show',\n        data: result,\n        resource: resource\n      };\n      return err\n        ? respond(req, res, status, err)\n        : respond(req, res, status, resource.lowerResource, result);\n    }\n\n  if (options.parent) {\n\n    if (!options.parentID) {\n      status = 500;\n      req.restful.error = { validate: { valid : false }};\n      return respond(req, res, status, { validate: { valid : false }});\n    }\n\n    options.parent.get(options.parentID, function(err, album) {\n      if (typeof album == 'undefined')\n        return respond(req, res, 404, \"Could not find \" + options.parent.lowerResource + \" with id \" + options.parentID);\n\n      album['create' + resource._resource](req.body, createHandler);\n    });\n  } else {\n    //\n    // Else, there is no parent resource\n    //\n    resource.create(req.body, createHandler);\n  }\n};\n\n\ncontroller.get = function (req, res, resource, optionsRef, respond) {\n  var options = utile.clone(optionsRef),\n      getter;\n\n  req.restful = {};\n  req.restful.action = \"show\";\n  req.restful.resource = resource;\n  if (options._id === \"new\") {\n    req.restful.action = \"create\";\n    return respond(req, res, 200)\n  }\n\n  var id = options._id.toString();\n  resource.get(id, function (err, result) {\n    if (err) {\n      req.restful.data = id;\n      return respond(req, res, 404, resource.lowerResource, id);;\n    }\n    req.restful.data = result;\n    respond(req, res, 200, resource.lowerResource, result);\n  });\n}\n"}